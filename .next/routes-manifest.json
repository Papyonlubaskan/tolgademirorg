{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [
    {
      "source": "/:path*",
      "headers": [
        {
          "key": "X-DNS-Prefetch-Control",
          "value": "on"
        },
        {
          "key": "Strict-Transport-Security",
          "value": "max-age=63072000; includeSubDomains; preload"
        },
        {
          "key": "X-Frame-Options",
          "value": "SAMEORIGIN"
        },
        {
          "key": "X-Content-Type-Options",
          "value": "nosniff"
        },
        {
          "key": "X-XSS-Protection",
          "value": "1; mode=block"
        },
        {
          "key": "Referrer-Policy",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "key": "Permissions-Policy",
          "value": "camera=(), microphone=(), geolocation=()"
        }
      ],
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/uploads/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/uploads(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Set-Cookie",
          "value": "SameSite=None; Secure; HttpOnly"
        }
      ],
      "regex": "^(?:/(.*))(?:/)?$"
    },
    {
      "source": "/sitemap.xml",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=3600, stale-while-revalidate=86400"
        }
      ],
      "regex": "^/sitemap\\.xml(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/admin/pages/[id]",
      "regex": "^/api/admin/pages/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/admin/pages/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/books/[id]",
      "regex": "^/api/books/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/books/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/books/[id]/chapters",
      "regex": "^/api/books/([^/]+?)/chapters(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/books/(?<nxtPid>[^/]+?)/chapters(?:/)?$"
    },
    {
      "page": "/api/books/[id]/views",
      "regex": "^/api/books/([^/]+?)/views(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/books/(?<nxtPid>[^/]+?)/views(?:/)?$"
    },
    {
      "page": "/api/chapters/[id]",
      "regex": "^/api/chapters/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/chapters/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/comments/[id]",
      "regex": "^/api/comments/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/comments/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/messages/[id]",
      "regex": "^/api/messages/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/api/messages/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/books/[id]",
      "regex": "^/books/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/books/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/books/[id]/chapter/[chapterId]",
      "regex": "^/books/([^/]+?)/chapter/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPchapterId": "nxtPchapterId"
      },
      "namedRegex": "^/books/(?<nxtPid>[^/]+?)/chapter/(?<nxtPchapterId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/kitaplar/[id]",
      "regex": "^/kitaplar/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/kitaplar/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/kitaplar/[id]/bolum/[bolumId]",
      "regex": "^/kitaplar/([^/]+?)/bolum/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPbolumId": "nxtPbolumId"
      },
      "namedRegex": "^/kitaplar/(?<nxtPid>[^/]+?)/bolum/(?<nxtPbolumId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/kitaplar/[id]/chapter/[chapterId]",
      "regex": "^/kitaplar/([^/]+?)/chapter/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid",
        "nxtPchapterId": "nxtPchapterId"
      },
      "namedRegex": "^/kitaplar/(?<nxtPid>[^/]+?)/chapter/(?<nxtPchapterId>[^/]+?)(?:/)?$"
    },
    {
      "page": "/uploads/images/[...filename]",
      "regex": "^/uploads/images/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPfilename": "nxtPfilename"
      },
      "namedRegex": "^/uploads/images/(?<nxtPfilename>.+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/books",
      "regex": "^/books(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/books(?:/)?$"
    },
    {
      "page": "/contact",
      "regex": "^/contact(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contact(?:/)?$"
    },
    {
      "page": "/gizlilik-politikasi",
      "regex": "^/gizlilik\\-politikasi(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/gizlilik\\-politikasi(?:/)?$"
    },
    {
      "page": "/hakkimda",
      "regex": "^/hakkimda(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/hakkimda(?:/)?$"
    },
    {
      "page": "/icon",
      "regex": "^/icon(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/icon(?:/)?$"
    },
    {
      "page": "/iletisim",
      "regex": "^/iletisim(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/iletisim(?:/)?$"
    },
    {
      "page": "/kitaplar",
      "regex": "^/kitaplar(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/kitaplar(?:/)?$"
    },
    {
      "page": "/kullanim-kosullari",
      "regex": "^/kullanim\\-kosullari(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/kullanim\\-kosullari(?:/)?$"
    },
    {
      "page": "/kvkk",
      "regex": "^/kvkk(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/kvkk(?:/)?$"
    },
    {
      "page": "/maintenance",
      "regex": "^/maintenance(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/maintenance(?:/)?$"
    },
    {
      "page": "/privacy-policy",
      "regex": "^/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    },
    {
      "page": "/yonetim",
      "regex": "^/yonetim(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/yonetim(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}